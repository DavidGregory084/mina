{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Mina",
  "scopeName": "source.mina",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#literals"
    },
    {
      "include": "#declarations"
    },
    {
      "include": "#symbols"
    },
    {
      "include": "#names"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "match": "(//.*)",
          "name": "comment.line.double-slash.mina"
        },
        {
          "begin": "(/\\*)",
          "beginCaptures": {
            "1": {
              "name": "comment.block.mina"
            }
          },
          "end": "(\\*/)",
          "endCaptures": {
            "1": {
              "name": "comment.block.mina"
            }
          },
          "name": "comment.block.mina"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(namespace)\\b",
          "name": "keyword.other.namespace.mina"
        },
        {
          "match": "\\b(import)\\b",
          "name": "keyword.other.import.mina"
        },
        {
          "match": "\\b(as)\\b",
          "name": "keyword.other.as.mina"
        },
        {
          "match": "\\b(data)\\b",
          "name": "keyword.other.data.mina"
        },
        {
          "match": "\\b(let)\\b",
          "name": "keyword.other.let.mina"
        },
        {
          "match": "\\b(fun)\\b",
          "name": "keyword.other.fun.mina"
        },
        {
          "match": "\\b(if|then|else)\\b",
          "name": "keyword.control.conditional.mina"
        },
        {
          "match": "\\b(match|with|case)\\b",
          "name": "keyword.control.matching.mina"
        },
        {
          "match": "\\b(return)\\b",
          "name": "keyword.control.return.mina"
        }
      ]
    },
    "escapes": {
      "name": "constant.character.escape.mina",
      "match": "(\\\\([bstnfr\"'\\\\]|u[0-9a-fA-F]{4}))"
    },
    "literals": {
      "patterns": [
        {
          "match": "(?<=^|\\s|\\p{Pattern_Syntax})([\\d._]+([eE][+-]?[\\d_]+)?[iIlLfFdD]?)(?=$|\\s|\\p{Pattern_Syntax})",
          "name": "constant.numeric.mina"
        },
        {
          "match": "\\b(true|false)\\b",
          "name": "constant.language.boolean.mina"
        },
        {
          "name": "constant.character.mina",
          "begin": "'",
          "patterns": [
            {
              "include": "#escapes"
            }
          ],
          "end": "'"
        },
        {
          "name": "string.quoted.double.mina",
          "begin": "\"",
          "patterns": [
            {
              "include": "#escapes"
            }
          ],
          "end": "\""
        }
      ]
    },
    "declarations": {
      "patterns": [
        {
          "match": "(?<=\\b(namespace)\\b\\s+)(\\p{XID_Start}\\p{XID_Continue}*)",
          "captures": {
            "2": {
              "name": "entity.name.namespace.mina"
            }
          }
        },
        {
          "match": "(?<=\\b(data)\\b\\s+)(\\p{XID_Start}\\p{XID_Continue}*)",
          "captures": {
            "2": {
              "name": "entity.name.type.mina"
            }
          }
        },
        {
          "match": "(?<=\\b(let)\\b\\s+)(\\p{XID_Start}\\p{XID_Continue}*)",
          "captures": {
            "2": {
              "name": "entity.name.function.mina"
            }
          }
        },
        {
          "match": "(?<=\\b(case)\\b\\s+)(\\p{XID_Start}\\p{XID_Continue}*)",
          "captures": {
            "2": {
              "name": "entity.name.function.mina"
            }
          }
        }
      ]
    },
    "symbols": {
      "patterns": [
        {
          "match": "->",
          "name": "storage.type.function.arrow.mina"
        },
        {
          "match": "=>",
          "name": "storage.type.function.fatarrow.mina"
        },
        {
          "match": ":",
          "name": "keyword.operator.type.assignment.mina"
        },
        {
          "match": "@",
          "name": "keyword.operator.matching.alias.mina"
        },
        {
          "match": "(&&|\\|\\|)",
          "name": "keyword.operator.logical.mina"
        },
        {
          "match": "([*%+-])",
          "name": "keyword.operator.arithmetic.mina"
        },
        {
          "match": "([~^|&]|<<|>>>?)",
          "name": "keyword.operator.bitwise.mina"
        },
        {
          "match": "(<=?|>=?)",
          "name": "keyword.operator.relational.mina"
        },
        {
          "match": "(!=|==)",
          "name": "keyword.operator.equality.mina"
        },
        {
          "match": "!",
          "name": "keyword.operator.logical.mina"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.mina"
        },
        {
          "match": "\\{",
          "name": "punctuation.brackets.curly.mina"
        },
        {
          "match": "\\}",
          "name": "punctuation.brackets.curly.mina"
        },
        {
          "match": "\\[",
          "name": "punctuation.brackets.square.mina"
        },
        {
          "match": "\\]",
          "name": "punctuation.brackets.square.mina"
        },
        {
          "match": "\\(",
          "name": "punctuation.brackets.round.mina"
        },
        {
          "match": "\\)",
          "name": "punctuation.brackets.round.mina"
        },
        {
          "match": "/",
          "name": "punctuation.separator.package.mina"
        },
        {
          "match": ",",
          "name": "punctuation.separator.list.mina"
        }
      ]
    },
    "names": {
      "patterns": [
        {
          "match": "(?<=/\\s*)(\\p{XID_Start}\\p{XID_Continue}*)",
          "captures": {
            "1": {
              "name": "entity.name.namespace.mina"
            }
          }
        },
        {
          "match": "(?<=^|\\s|\\p{Pattern_Syntax})(\\p{XID_Start}\\p{XID_Continue}*)(?=$|\\s|\\p{Pattern_Syntax})",
          "captures": {
            "1": {
              "name": "variable.other.mina"
            }
          }
        },
        {
          "match": "(?<=^|\\s|\\p{Pattern_Syntax})(_\\p{XID_Continue}+)(?=$|\\s|\\p{Pattern_Syntax})",
          "captures": {
            "1": {
              "name": "variable.other.mina"
            }
          }
        }
      ]
    }
  }
}
