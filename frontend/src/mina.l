%%
\p{Pattern_White_Space} ;

\( "LPAREN"
\) "RPAREN"
\{ "LBRACE"
\} "RBRACE"
\[ "LSQUARE"
\] "RSQUARE"
< "LANGLE"
> "RANGLE"
\\ "LSLASH"
/ "RSLASH"
\. "DOT"
, "COMMA"
: "COLON"
; "SEMICOLON"
= "EQ"
@ "AT"
\* "MULT"
\+ "PLUS"

\-> "ARROW"

module "MODULE"
import "IMPORT"
let "LET"
if "IF"
then "THEN"
else "ELSE"
case "CASE"
data "DATA"
match "MATCH"
with "WITH"

([0-9][0-9_]*[0-9]|[0-9])\.([0-9][0-9_]*[0-9]|[0-9])([eE][+\-]([0-9][0-9_]*[0-9]|[0-9]))?[dDfF]? "LITERAL_FLOAT"
([1-9][0-9]*|0)[lL]? "LITERAL_INT"
'[^'\r\n\\]' "LITERAL_CHAR"
(true|false) "LITERAL_BOOLEAN"
"[^"\\]*" "LITERAL_STRING"
(\p{XID_Start}\p{XID_Continue}*|\p{XID_Continue}+) "IDENTIFIER"